// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/server.proto
#ifndef GRPC_protos_2fserver_2eproto__INCLUDED
#define GRPC_protos_2fserver_2eproto__INCLUDED

#include "protos/server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace MyVocaloid {

class Vocaloid final {
 public:
  static constexpr char const* service_full_name() {
    return "MyVocaloid.Vocaloid";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyVocaloid::SingReply>> Sing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyVocaloid::SingReply>>(SingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>> AsyncSing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>>(AsyncSingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>> PrepareAsyncSing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>>(PrepareAsyncSingRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::MyVocaloid::SingReply>* SingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>* AsyncSingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyVocaloid::SingReply>* PrepareAsyncSingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::MyVocaloid::SingReply>> Sing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyVocaloid::SingReply>>(SingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>> AsyncSing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>>(AsyncSingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>> PrepareAsyncSing(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>>(PrepareAsyncSingRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::MyVocaloid::SingReply>* SingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request) override;
    ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>* AsyncSingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyVocaloid::SingReply>* PrepareAsyncSingRaw(::grpc::ClientContext* context, const ::MyVocaloid::SingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Sing_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Sing(::grpc::ServerContext* context, const ::MyVocaloid::SingRequest* request, ::grpc::ServerWriter< ::MyVocaloid::SingReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Sing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Sing() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Sing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sing(::grpc::ServerContext* context, const ::MyVocaloid::SingRequest* request, ::grpc::ServerWriter< ::MyVocaloid::SingReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSing(::grpc::ServerContext* context, ::MyVocaloid::SingRequest* request, ::grpc::ServerAsyncWriter< ::MyVocaloid::SingReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Sing<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Sing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Sing() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Sing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sing(::grpc::ServerContext* context, const ::MyVocaloid::SingRequest* request, ::grpc::ServerWriter< ::MyVocaloid::SingReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Sing() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Sing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sing(::grpc::ServerContext* context, const ::MyVocaloid::SingRequest* request, ::grpc::ServerWriter< ::MyVocaloid::SingReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Sing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Sing() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::MyVocaloid::SingRequest, ::MyVocaloid::SingReply>(std::bind(&WithSplitStreamingMethod_Sing<BaseClass>::StreamedSing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Sing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sing(::grpc::ServerContext* context, const ::MyVocaloid::SingRequest* request, ::grpc::ServerWriter< ::MyVocaloid::SingReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSing(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyVocaloid::SingRequest,::MyVocaloid::SingReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Sing<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Sing<Service > StreamedService;
};

}  // namespace MyVocaloid


#endif  // GRPC_protos_2fserver_2eproto__INCLUDED
